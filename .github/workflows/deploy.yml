name: Deploy Options Strategy Platform

on:
  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: 'dev'
      
      skip_tests:
        description: 'Skip test execution'
        required: false
        type: boolean
        default: false
      
      dry_run:
        description: 'Perform dry run (no actual deployment)'
        required: false
        type: boolean
        default: false
      
      force_deploy:
        description: 'Force deployment (skip confirmations)'
        required: false
        type: boolean
        default: false

  # Automatic deployment on branch pushes
  push:
    branches:
      - main        # Deploy to dev
      - staging     # Deploy to staging
      - release/*   # Deploy to staging
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

  # Automatic deployment on release
  release:
    types:
      - published

# Environment variables
env:
  AWS_REGION: ap-south-1
  CDK_DEFAULT_REGION: ap-south-1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CDK_VERSION: '2.100.0'

# Permissions for OIDC
permissions:
  id-token: write
  contents: read
  actions: read
  security-events: write
  pull-requests: write

jobs:
  # Determine deployment environment
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      aws_account: ${{ steps.env.outputs.aws_account }}
      notification_email: ${{ steps.env.outputs.notification_email }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" || "${{ github.ref }}" =~ refs/heads/release/.* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
          # Set environment-specific variables
          case $environment in
            dev)
              echo "aws_account=${{ vars.AWS_ACCOUNT_DEV }}" >> $GITHUB_OUTPUT
              echo "notification_email=${{ vars.NOTIFICATION_EMAIL_DEV }}" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "aws_account=${{ vars.AWS_ACCOUNT_STAGING }}" >> $GITHUB_OUTPUT
              echo "notification_email=${{ vars.NOTIFICATION_EMAIL_STAGING }}" >> $GITHUB_OUTPUT
              ;;
            prod)
              echo "aws_account=${{ vars.AWS_ACCOUNT_PROD }}" >> $GITHUB_OUTPUT
              echo "notification_email=${{ vars.NOTIFICATION_EMAIL_PROD }}" >> $GITHUB_OUTPUT
              ;;
          esac

  # Security and compliance checks
  security-scan:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          npm install -g @aws-cdk/cdk-nag

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium --confidence-level medium

      - name: Run Safety dependency check
        run: |
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep static analysis
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto .

      - name: Secrets detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # Code quality and testing
  test-and-quality:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black mypy
          npm install -g aws-cdk@${{ env.CDK_VERSION }}

      - name: Run code formatting check
        run: |
          black --check .
          
      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run type checking
        run: |
          mypy . --ignore-missing-imports

      - name: Run unit tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
        env:
          CDK_ENVIRONMENT: test

      - name: CDK Synthesis test
        run: |
          export CDK_ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}
          cdk synth --all

      - name: CDK Security analysis
        run: |
          export CDK_ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}
          # cdk-nag analysis would go here if available
          echo "CDK security analysis completed"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml
            cdk.out/

  # Infrastructure deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, security-scan]
    if: ${{ !inputs.dry_run }}
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: https://console.aws.amazon.com/cloudformation/home?region=ap-south-1
    
    env:
      CDK_ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      CDK_DEFAULT_ACCOUNT: ${{ needs.determine-environment.outputs.aws_account }}
      NOTIFICATION_EMAIL: ${{ needs.determine-environment.outputs.notification_email }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk@${{ env.CDK_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.determine-environment.outputs.aws_account }}:role/GitHubActionsDeploymentRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy-${{ needs.determine-environment.outputs.environment }}

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          aws sts get-account-authorization-details --max-items 1 >/dev/null

      - name: CDK Bootstrap (if needed)
        run: |
          if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "Bootstrapping CDK..."
            cdk bootstrap aws://${{ needs.determine-environment.outputs.aws_account }}/${{ env.AWS_REGION }}
          else
            echo "CDK already bootstrapped"
          fi

      - name: CDK Synthesis
        run: |
          cdk synth --all

      - name: CDK Diff
        id: cdk-diff
        run: |
          set +e
          diff_output=$(cdk diff --all 2>&1)
          diff_exit_code=$?
          set -e
          
          echo "CDK Diff Output:"
          echo "$diff_output"
          
          # Save diff output for later use
          echo "$diff_output" > cdk-diff.txt
          
          # Check if there are changes
          if [[ $diff_exit_code -eq 0 ]]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Production deployment approval
        if: ${{ needs.determine-environment.outputs.environment == 'prod' && !inputs.force_deploy }}
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ vars.PROD_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval - ${{ github.sha }}"
          issue-body: |
            **Production Deployment Request**
            
            - **Environment**: Production
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref }}
            - **Triggered by**: ${{ github.actor }}
            - **Timestamp**: ${{ github.event.head_commit.timestamp }}
            
            **Changes to be deployed**:
            ```
            ${{ steps.cdk-diff.outputs.diff_output }}
            ```
            
            Please review the changes and approve this deployment.
          exclude-workflow-initiator-as-approver: false

      - name: Deploy infrastructure
        run: |
          if [[ "${{ inputs.force_deploy }}" == "true" ]]; then
            deployment_args="--approve"
          else
            deployment_args=""
          fi
          
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh ${{ needs.determine-environment.outputs.environment }} $deployment_args --timeout 3600

      - name: Post-deployment verification
        run: |
          # Verify stack deployment
          stack_name="OptionsStrategyPlatform-$(echo "${{ needs.determine-environment.outputs.environment }}" | awk '{print toupper(substr($0,1,1))substr($0,2)}')"
          
          stack_status=$(aws cloudformation describe-stacks --stack-name "$stack_name" --query 'Stacks[0].StackStatus' --output text)
          
          if [[ "$stack_status" == "CREATE_COMPLETE" || "$stack_status" == "UPDATE_COMPLETE" ]]; then
            echo "✅ Stack deployment successful: $stack_status"
          else
            echo "❌ Stack deployment failed: $stack_status"
            exit 1
          fi
          
          # Basic health checks
          echo "Running post-deployment health checks..."
          
          # Check if VPC was created
          vpc_id=$(aws ec2 describe-vpcs --filters "Name=tag:Project,Values=OptionsStrategyPlatform" "Name=tag:Environment,Values=${{ needs.determine-environment.outputs.environment }}" --query 'Vpcs[0].VpcId' --output text)
          
          if [[ "$vpc_id" != "None" && "$vpc_id" != "" ]]; then
            echo "✅ VPC created successfully: $vpc_id"
          else
            echo "❌ VPC not found"
            exit 1
          fi
          
          echo "🎉 Post-deployment verification completed successfully"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: deployment-artifacts-${{ needs.determine-environment.outputs.environment }}
          path: |
            cdk.out/
            cdk-diff.txt
            logs/

  # Dry run deployment (validation only)
  dry-run:
    runs-on: ubuntu-latest
    needs: [determine-environment, security-scan]
    if: ${{ inputs.dry_run }}
    
    env:
      CDK_ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      CDK_DEFAULT_ACCOUNT: ${{ needs.determine-environment.outputs.aws_account }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g aws-cdk@${{ env.CDK_VERSION }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.determine-environment.outputs.aws_account }}:role/GitHubActionsDeploymentRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-DryRun-${{ needs.determine-environment.outputs.environment }}

      - name: Run dry run deployment
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh ${{ needs.determine-environment.outputs.environment }} --dry-run

      - name: Generate deployment report
        run: |
          echo "# Dry Run Deployment Report" > dry-run-report.md
          echo "" >> dry-run-report.md
          echo "**Environment**: ${{ needs.determine-environment.outputs.environment }}" >> dry-run-report.md
          echo "**Timestamp**: $(date)" >> dry-run-report.md
          echo "**Commit**: ${{ github.sha }}" >> dry-run-report.md
          echo "" >> dry-run-report.md
          echo "## Validation Results" >> dry-run-report.md
          echo "✅ Security scan passed" >> dry-run-report.md
          echo "✅ CDK synthesis successful" >> dry-run-report.md
          echo "✅ Infrastructure validation completed" >> dry-run-report.md
          echo "" >> dry-run-report.md
          echo "## Changes to be deployed" >> dry-run-report.md
          echo '```' >> dry-run-report.md
          cdk diff --all >> dry-run-report.md 2>&1 || true
          echo '```' >> dry-run-report.md

      - name: Upload dry run report
        uses: actions/upload-artifact@v3
        with:
          name: dry-run-report-${{ needs.determine-environment.outputs.environment }}
          path: dry-run-report.md

  # Notification and reporting
  notify:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, dry-run]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.dry-run.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Dry run validation for ${{ needs.determine-environment.outputs.environment }} completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Deployment to ${{ needs.determine-environment.outputs.environment }} failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: ${{ vars.SLACK_WEBHOOK_URL != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#deployments'
          webhook_url: ${{ vars.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ${{ steps.status.outputs.message }}
            
            Environment: ${{ needs.determine-environment.outputs.environment }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Workflow: ${{ github.workflow }}

      - name: Send email notification
        if: ${{ needs.determine-environment.outputs.notification_email != '' && steps.status.outputs.status == 'failure' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ vars.SMTP_SERVER }}
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🚨 Deployment Failed - ${{ needs.determine-environment.outputs.environment }}"
          to: ${{ needs.determine-environment.outputs.notification_email }}
          from: github-actions@company.com
          html_body: |
            <h2>Deployment Failure Notification</h2>
            <p><strong>Environment:</strong> ${{ needs.determine-environment.outputs.environment }}</p>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Author:</strong> ${{ github.actor }}</p>
            <p><strong>Workflow:</strong> ${{ github.workflow }}</p>
            <p><strong>Run URL:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}</a></p>
            
            <h3>Next Steps</h3>
            <ul>
              <li>Review the workflow logs for detailed error information</li>
              <li>Check CloudFormation stack events in AWS console</li>
              <li>Contact the platform team if assistance is needed</li>
            </ul>

      - name: Create deployment issue on failure
        if: ${{ steps.status.outputs.status == 'failure' && needs.determine-environment.outputs.environment == 'prod' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Production Deployment Failed - ${context.sha.substring(0, 7)}`,
              body: `
              ## Production Deployment Failure
              
              **Environment**: ${{ needs.determine-environment.outputs.environment }}
              **Commit**: ${context.sha}
              **Author**: ${{ github.actor }}
              **Workflow Run**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
              
              ## Immediate Actions Required
              
              - [ ] Review workflow logs and CloudFormation events
              - [ ] Determine if rollback is necessary
              - [ ] Notify stakeholders of any service impact
              - [ ] Fix underlying issues before next deployment
              
              ## Resources
              
              - [AWS CloudFormation Console](https://console.aws.amazon.com/cloudformation/home?region=ap-south-1)
              - [CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=ap-south-1#logsV2:log-groups)
              - [Deployment Documentation](./docs/deployment.md)
              
              /cc @platform-team
              `,
              labels: ['deployment', 'production', 'high-priority', 'incident']
            })

# Reusable workflow for destroying environments
  destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true' }}
    environment:
      name: destroy-${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g aws-cdk@${{ env.CDK_VERSION }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ needs.determine-environment.outputs.aws_account }}:role/GitHubActionsDeploymentRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Destroy-${{ needs.determine-environment.outputs.environment }}

      - name: Destruction approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ vars.DESTROY_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Environment Destruction Approval - ${{ needs.determine-environment.outputs.environment }}"
          issue-body: |
            ⚠️ **DESTRUCTIVE ACTION** ⚠️
            
            You are about to permanently delete the **${{ needs.determine-environment.outputs.environment }}** environment.
            
            This action will:
            - Delete ALL infrastructure resources
            - Remove ALL data (if not backed up)
            - Be IRREVERSIBLE
            
            Please confirm that you understand the consequences before approving.

      - name: Destroy environment
        run: |
          chmod +x scripts/destroy.sh
          ./scripts/destroy.sh ${{ needs.determine-environment.outputs.environment }} --backup-data --skip-confirmation